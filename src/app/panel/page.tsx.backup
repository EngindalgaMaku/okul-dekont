  if (!isletme) {
    return null 
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <header className="bg-gradient-to-br from-blue-600 via-indigo-600 to-purple-700 shadow-xl">
        <div className="max-w-7xl mx-auto">
          <div className="relative z-10">
            <div className="px-6 py-8">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-6">
                  <div className="p-3 bg-white/20 backdrop-blur-sm rounded-2xl">
                    <Building2 className="h-10 w-10 text-white" />
                  </div>
                  <div>
                    <h1 className="text-3xl font-bold text-white">
                      {isletme.ad}
                    </h1>
                    <p className="text-blue-100 font-medium mt-1">İşletme Paneli</p>
                  </div>
                </div>
                <button
                  onClick={handleLogout}
                  className="flex items-center justify-center text-blue-100 hover:text-white bg-white/10 hover:bg-white/20 h-12 w-12 rounded-xl transition-all duration-200"
                  title="Çıkış Yap"
                >
                  <LogOut className="h-6 w-6" />
                  <span className="sr-only">Çıkış Yap</span>
                </button>
              </div>
            </div>

            {/* Tabs */}
            <div className="px-6 -mb-px">
              <nav className="flex space-x-4" aria-label="Tabs">
                {[
                  { id: 'ogrenciler', icon: Users, label: 'Öğrenciler' },
                  { id: 'dekontlar', icon: Receipt, label: 'Dekontlar' },
                  { id: 'belgeler', icon: FileText, label: 'Belgeler' }
                ].map((tab) => {
                  const Icon = tab.icon;
                  return (
                    <button
                      key={tab.id}
                      onClick={() => setActiveTab(tab.id as ActiveTab)}
                      className={`
                        flex items-center px-6 py-4 rounded-t-2xl transition-all duration-200
                        ${activeTab === tab.id 
                          ? 'bg-white text-indigo-600 shadow-lg shadow-black/5' 
                          : 'text-blue-100 hover:text-white hover:bg-white/10'}
                      `}
                    >
                      <Icon className="h-5 w-5 mr-2" />
                      <span className="font-medium">{tab.label}</span>
                    </button>
                  );
                })}
              </nav>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-6 py-8">
        {activeTab === 'ogrenciler' && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {ogrenciler.map((ogrenci) => (
              <div key={ogrenci.id} className="bg-white rounded-2xl shadow-lg shadow-indigo-100/20 border border-indigo-50 overflow-hidden hover:shadow-xl hover:border-indigo-100 transition-all duration-300">
                <div className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center">
                      <div className="h-12 w-12 bg-indigo-50 rounded-xl flex items-center justify-center">
                        <User className="h-6 w-6 text-indigo-600" />
                      </div>
                      <div className="ml-4">
                        <h3 className="text-lg font-semibold text-gray-900">
                          {ogrenci.ad} {ogrenci.soyad}
                        </h3>
                        <p className="text-sm text-gray-500">{ogrenci.alan}</p>
                      </div>
                    </div>
                    <button
                      onClick={() => {
                        setSelectedOgrenci(ogrenci)
                        setDekontModalOpen(true)
                      }}
                      className="p-2 text-indigo-600 hover:text-indigo-800 hover:bg-indigo-50 rounded-xl transition-colors"
                      title="Dekont Yükle"
                    >
                      <Upload className="h-5 w-5" />
                    </button>
                  </div>
                  <div className="mt-4 space-y-2">
                    <div className="flex items-center text-sm text-gray-600">
                      <GraduationCap className="h-4 w-4 mr-2" />
                      {ogrenci.sinif} - {ogrenci.no}
                    </div>
                    <div className="flex items-center text-sm text-gray-600">
                      <Calendar className="h-4 w-4 mr-2" />
                      {new Date(ogrenci.baslangic_tarihi).toLocaleDateString('tr-TR')} - {new Date(ogrenci.bitis_tarihi).toLocaleDateString('tr-TR')}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'dekontlar' && (
          <div className="space-y-6">
            {dekontlar.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {dekontlar.map((dekont) => (
                  <div key={dekont.id} className="bg-white rounded-2xl shadow-lg shadow-indigo-100/20 border border-indigo-50 overflow-hidden hover:shadow-xl hover:border-indigo-100 transition-all duration-300">
                    <div className="p-6">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="text-lg font-semibold text-gray-900">
                            {dekont.stajlar?.ogrenciler?.ad} {dekont.stajlar?.ogrenciler?.soyad}
                          </h3>
                          <p className="text-sm text-gray-500 mt-1">
                            {dekont.ay} {dekont.yil}
                          </p>
                        </div>
                        <div className="flex items-center space-x-2">
                          {dekont.dosya_url && (
                            <button
                              onClick={() => window.open(dekont.dosya_url, '_blank')}
                              className="p-2 text-indigo-600 hover:text-indigo-800 hover:bg-indigo-50 rounded-xl transition-colors"
                              title="Dekont İndir"
                            >
                              <Download className="h-5 w-5" />
                            </button>
                          )}
                        </div>
                      </div>
                      <div className="mt-4 space-y-3">
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Ödeme Tarihi:</span>
                          <span className="font-medium text-gray-900">
                            {new Date(dekont.odeme_tarihi).toLocaleDateString('tr-TR')}
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Tutar:</span>
                          <span className="font-medium text-gray-900">
                            {dekont.miktar?.toLocaleString('tr-TR')} ₺
                          </span>
                        </div>
                        <div className="flex items-center justify-between text-sm">
                          <span className="text-gray-600">Durum:</span>
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                            dekont.onay_durumu === 'onaylandi' 
                              ? 'bg-green-100 text-green-800'
                              : dekont.onay_durumu === 'bekliyor'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {dekont.onay_durumu === 'onaylandi' && <CheckCircle className="h-3 w-3 mr-1" />}
                            {dekont.onay_durumu === 'bekliyor' && <Clock className="h-3 w-3 mr-1" />}
                            {dekont.onay_durumu === 'reddedildi' && <XCircle className="h-3 w-3 mr-1" />}
                            {dekont.onay_durumu === 'onaylandi' ? 'Onaylandı'
                              : dekont.onay_durumu === 'bekliyor' ? 'Bekliyor'
                              : 'Reddedildi'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12 bg-white rounded-2xl shadow-lg shadow-indigo-100/20 border border-indigo-50">
                <Receipt className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-4 text-lg font-medium text-gray-900">Henüz Dekont Yok</h3>
                <p className="mt-2 text-sm text-gray-500">Bu işletmeye ait hiç dekont bulunmamaktadır.</p>
              </div>
            )}
          </div>
        )}

        {activeTab === 'belgeler' && (
          <div className="space-y-6">
            <div className="flex flex-col sm:flex-row justify-between items-center gap-4">
              <h2 className="text-2xl font-bold text-gray-900">
                İşletme Belgeleri ({filteredBelgeler.length})
              </h2>
              <button
                onClick={() => setBelgeModalOpen(true)}
                className="w-full sm:w-auto inline-flex items-center justify-center px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl hover:from-indigo-700 hover:to-purple-700 transition-all duration-200"
              >
                <Plus className="h-5 w-5 mr-2" />
                Yeni Belge Ekle
              </button>
            </div>

            <div className="flex flex-col sm:flex-row gap-4">
              <div className="relative flex-grow">
                <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  placeholder="Belgelerde ara..."
                  value={belgeSearchTerm}
                  onChange={(e) => setBelgeSearchTerm(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                />
              </div>
              <div className="relative w-full sm:w-48">
                <Filter className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" />
                <select
                  value={belgeTurFilter}
                  onChange={(e) => setBelgeTurFilter(e.target.value)}
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-xl focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 appearance-none bg-white"
                >
                  <option value="all">Tüm Türler</option>
                  <option value="sozlesme">Sözleşme</option>
                  <option value="fesih_belgesi">Fesih Belgesi</option>
                  <option value="usta_ogretici_belgesi">Usta Öğretici Belgesi</option>
                  <option value="diger">Diğer</option>
                </select>
              </div>
            </div>

            {filteredBelgeler.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredBelgeler.map((belge) => (
                  <div key={belge.id} className="bg-white rounded-2xl shadow-lg shadow-indigo-100/20 border border-indigo-50 overflow-hidden hover:shadow-xl hover:border-indigo-100 transition-all duration-300">
                    <div className="p-6">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center">
                          <div className="h-12 w-12 bg-indigo-50 rounded-xl flex items-center justify-center">
                            <FileText className="h-6 w-6 text-indigo-600" />
                          </div>
                          <div className="ml-4">
                            <h3 className="text-lg font-semibold text-gray-900">
                              {belge.ad}
                            </h3>
                            <p className="text-sm text-gray-500">{formatBelgeTur(belge.tur)}</p>
                          </div>
                        </div>
                        <div className="flex items-center space-x-2">
                          {belge.dosya_url && (
                            <button
                              onClick={() => window.open(belge.dosya_url, '_blank')}
                              className="p-2 text-indigo-600 hover:text-indigo-800 hover:bg-indigo-50 rounded-xl transition-colors"
                              title="Belge İndir"
                            >
                              <Download className="h-5 w-5" />
                            </button>
                          )}
                        </div>
                      </div>
                      <div className="mt-4">
                        <p className="text-sm text-gray-500">
                          Yüklenme Tarihi: {new Date(belge.yukleme_tarihi).toLocaleDateString('tr-TR')}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12 bg-white rounded-2xl shadow-lg shadow-indigo-100/20 border border-indigo-50">
                <FileText className="mx-auto h-12 w-12 text-gray-400" />
                <h3 className="mt-4 text-lg font-medium text-gray-900">Henüz Belge Yok</h3>
                <p className="mt-2 text-sm text-gray-500">Bu işletmeye ait hiç belge bulunmamaktadır.</p>
              </div>
            )}
          </div>
        )}
      </main>

      {/* Modals */}
      <Modal isOpen={dekontModalOpen} onClose={() => setDekontModalOpen(false)} title="Yeni Dekont Ekle">
        {/* ... existing modal content ... */}
      </Modal>

      <Modal isOpen={belgeModalOpen} onClose={() => setBelgeModalOpen(false)} title="Yeni Belge Ekle">
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Belge Adı
            </label>
            <input
              type="text"
              value={belgeFormData.ad}
              onChange={(e) => setBelgeFormData({...belgeFormData, ad: e.target.value})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              placeholder="Belge adını giriniz"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Belge Türü
            </label>
            <select
              value={belgeFormData.tur}
              onChange={(e) => setBelgeFormData({...belgeFormData, tur: e.target.value, customTur: ''})}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="sozlesme">Sözleşme</option>
              <option value="fesih_belgesi">Fesih Belgesi</option>
              <option value="usta_ogretici_belgesi">Usta Öğretici Belgesi</option>
              <option value="other">Diğer (Manuel Giriş)</option>
            </select>
          </div>

          {belgeFormData.tur === 'other' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Özel Belge Türü
              </label>
              <input
                type="text"
                value={belgeFormData.customTur}
                onChange={(e) => setBelgeFormData({...belgeFormData, customTur: e.target.value})}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
                placeholder="Belge türünü yazınız"
              />
            </div>
          )}

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Dosya Seçin <span className="text-red-500">*</span>
            </label>
            <div className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition-colors">
              <input
                type="file"
                id="belge-dosya"
                accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
                onChange={(e) => setBelgeFormData({...belgeFormData, dosya: e.target.files?.[0] || null})}
                className="hidden"
                required
              />
              <label htmlFor="belge-dosya" className="cursor-pointer">
                <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                <p className="text-sm text-gray-600">
                  {belgeFormData.dosya ? belgeFormData.dosya.name : 'Dosya seçmek için tıklayın'}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  PDF, DOC, DOCX, JPG, PNG formatları desteklenir
                </p>
              </label>
            </div>
          </div>

          <div className="flex justify-end space-x-3 pt-4">
            <button
              onClick={() => setBelgeModalOpen(false)}
              className="px-4 py-2 text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 transition-colors"
            >
              İptal
            </button>
            <button
              onClick={handleBelgeEkle}
              className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-200"
            >
              Belge Ekle
            </button>
          </div>
        </div>
      </Modal>

      {/* Dekontları Görüntüleme Modalı */}
    </div>
  ); 